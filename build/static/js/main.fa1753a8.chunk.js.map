{"version":3,"sources":["images/WeatherIcons.gif","apiKeys.js","forcast.js","currentLocation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","key","base","Forcast","props","query","setQuery","useState","error","setError","weather","setWeather","search","city","axios","get","concat","apiKeys","then","response","data","catch","console","log","message","defaults","useEffect","React","createElement","className","ReactAnimatedWeather","icon","color","size","animate","type","placeholder","onChange","e","target","value","src","onClick","main","name","sys","country","Math","round","temp","humidity","visibility","wind","speed","Weather","Component","constructor","arguments","state","lat","undefined","lon","errorMessage","temperatureC","temperatureF","description","sunrise","sunset","errorMsg","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","async","api_call","fetch","json","this","setState","componentDidMount","position","coords","latitude","longitude","err","alert","timerID","setInterval","componentWillUnmount","clearInterval","render","Fragment","id","Clock","format","interval","ticking","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","loader","style","width","WebkitUserDrag","fontSize","fontWeight","marginTop","App","CurrentLocation","href","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fa1753a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/WeatherIcons.0a218296.gif\";","module.exports = {\r\n  key: \"f98a0fc96636335425b056e0ff765ae0\",\r\n  base: \"https://api.openweathermap.org/data/2.5/\",\r\n};\r\n","import React, { useState, useEffect, Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport apiKeys from \"./apiKeys\";\r\nimport ReactAnimatedWeather from \"react-animated-weather\";\r\n\r\nfunction Forcast(props) {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [weather, setWeather] = useState({});\r\n\r\n  const search = (city) => {\r\n    axios\r\n      .get(\r\n        `${apiKeys.base}weather?q=${\r\n          city != \"[object Object]\" ? city : query\r\n        }&units=metric&APPID=${apiKeys.key}`\r\n      )\r\n      .then((response) => {\r\n        setWeather(response.data);\r\n        setQuery(\"\");\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        setWeather(\"\");\r\n        setQuery(\"\");\r\n        setError({ message: \"Not Found\", query: query });\r\n      });\r\n  };\r\n  function checkTime(i) {\r\n    if (i < 10) {\r\n      i = \"0\" + i;\r\n    } \r\n    return i;\r\n  }\r\n\r\n  const defaults = {\r\n    color: \"white\",\r\n    size: 112,\r\n    animate: true,\r\n  };\r\n\r\n  useEffect(() => {\r\n    search(\"Delhi\");\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"forecast\">\r\n      <div className=\"forecast-icon\">\r\n        <ReactAnimatedWeather\r\n          icon={props.icon}\r\n          color={defaults.color}\r\n          size={defaults.size}\r\n          animate={defaults.animate}\r\n        />\r\n      </div>\r\n      <div className=\"today-weather\">\r\n        <h3>{props.weather}</h3>\r\n        <div className=\"search-box\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"search-bar\"\r\n            placeholder=\"Search any city\"\r\n            onChange={(e) => setQuery(e.target.value)}\r\n            value={query}\r\n          />\r\n          <div className=\"img-box\">\r\n            {\" \"}\r\n            <img\r\n              src=\"https://images.avishkaar.cc/workflow/newhp/search-white.png\"\r\n              onClick={search}\r\n            />\r\n          </div>\r\n        </div>\r\n        <ul>\r\n          {typeof weather.main != \"undefined\" ? (\r\n            <div>\r\n              {\" \"}\r\n              <li className=\"cityHead\">\r\n                <p>\r\n                  {weather.name}, {weather.sys.country}\r\n                </p>\r\n                <img\r\n                  className=\"temp\"\r\n                  src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\r\n                />\r\n              </li>\r\n              <li>\r\n                Temperature{\" \"}\r\n                <span className=\"temp\">\r\n                  {Math.round(weather.main.temp)}Â°c ({weather.weather[0].main})\r\n                </span>\r\n              </li>\r\n              <li>\r\n                Humidity{\" \"}\r\n                <span className=\"temp\">\r\n                  {Math.round(weather.main.humidity)}%\r\n                </span>\r\n              </li>\r\n              <li>\r\n                Visibility{\" \"}\r\n                <span className=\"temp\">\r\n                  {Math.round(weather.visibility)} mi\r\n                </span>\r\n              </li>\r\n              <li>\r\n                Wind Speed{\" \"}\r\n                <span className=\"temp\">\r\n                  {Math.round(weather.wind.speed)} Km/h\r\n                </span>\r\n              </li>\r\n            </div>\r\n          ) : (\r\n            <li>\r\n              {error.query} {error.message}\r\n            </li>\r\n          )}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Forcast;\r\n","import React from \"react\";\r\nimport apiKeys from \"./apiKeys\";\r\nimport Clock from \"react-live-clock\";\r\nimport Forcast from \"./forcast\";\r\nimport loader from \"./images/WeatherIcons.gif\";\r\nimport ReactAnimatedWeather from \"react-animated-weather\";\r\nconst dateBuilder = (d) => {\r\n  let months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n  let days = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ];\r\n\r\n  let day = days[d.getDay()];\r\n  let date = d.getDate();\r\n  let month = months[d.getMonth()];\r\n  let year = d.getFullYear();\r\n\r\n  return `${day}, ${date} ${month} ${year}`;\r\n};\r\nconst defaults = {\r\n  color: \"white\",\r\n  size: 112,\r\n  animate: true,\r\n};\r\nclass Weather extends React.Component {\r\n  state = {\r\n    lat: undefined,\r\n    lon: undefined,\r\n    errorMessage: undefined,\r\n    temperatureC: undefined,\r\n    temperatureF: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    humidity: undefined,\r\n    description: undefined,\r\n    icon: \"CLEAR_DAY\",\r\n    sunrise: undefined,\r\n    sunset: undefined,\r\n    errorMsg: undefined,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (navigator.geolocation) {\r\n      this.getPosition()\r\n        .then((position) => {\r\n          this.getWeather(position.coords.latitude, position.coords.longitude);\r\n        })\r\n        .catch((err) => {\r\n          this.getWeather(28.67, 77.22);\r\n          alert(\r\n            \"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\"\r\n          );\r\n        });\r\n    } else {\r\n      alert(\"Geolocation not available\");\r\n    }\r\n\r\n    this.timerID = setInterval(\r\n      () => this.getWeather(this.state.lat, this.state.lon),\r\n      600000\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n\r\n\r\n  getPosition = (options) => {\r\n    return new Promise(function (resolve, reject) {\r\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\r\n    });\r\n  };\r\n  getWeather = async (lat, lon) => {\r\n    const api_call = await fetch(\r\n      `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`\r\n    );\r\n    const data = await api_call.json();\r\n    this.setState({\r\n      lat: lat,\r\n      lon: lon,\r\n      city: data.name,\r\n      temperatureC: Math.round(data.main.temp),\r\n      temperatureF: Math.round(data.main.temp * 1.8 + 32),\r\n      humidity: data.main.humidity,\r\n      main: data.weather[0].main,\r\n      country: data.sys.country,\r\n      \r\n    });\r\n    switch (this.state.main) {\r\n      case \"Haze\":\r\n        this.setState({ icon: \"CLEAR_DAY\" });\r\n        break;\r\n      case \"Clouds\":\r\n        this.setState({ icon: \"CLOUDY\" });\r\n        break;\r\n      case \"Rain\":\r\n        this.setState({ icon: \"RAIN\" });\r\n        break;\r\n      case \"Snow\":\r\n        this.setState({ icon: \"SNOW\" });\r\n        break;\r\n      case \"Dust\":\r\n        this.setState({ icon: \"WIND\" });\r\n        break;\r\n      case \"Drizzle\":\r\n        this.setState({ icon: \"SLEET\" });\r\n        break;\r\n      case \"Fog\":\r\n        this.setState({ icon: \"FOG\" });\r\n        break;\r\n      case \"Smoke\":\r\n        this.setState({ icon: \"FOG\" });\r\n        break;\r\n      case \"Tornado\":\r\n        this.setState({ icon: \"WIND\" });\r\n        break;\r\n      default:\r\n        this.setState({ icon: \"CLEAR_DAY\" });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.state.temperatureC) {\r\n      return (\r\n        <React.Fragment>\r\n          <div className=\"city\">\r\n            <div className=\"title\">\r\n              <h2>{this.state.city}</h2>\r\n              <h3>{this.state.country}</h3>\r\n            </div>\r\n            <div className=\"mb-icon\">\r\n              {\" \"}\r\n              <ReactAnimatedWeather\r\n                icon={this.state.icon}\r\n                color={defaults.color}\r\n                size={defaults.size}\r\n                animate={defaults.animate}\r\n              />\r\n              <p>{this.state.main}</p>\r\n            </div>\r\n            <div className=\"date-time\">\r\n              <div className=\"dmy\">\r\n                <div id=\"txt\"></div>\r\n                <div className=\"current-time\">\r\n                  <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\r\n                </div>\r\n                <div className=\"current-date\">{dateBuilder(new Date())}</div>\r\n              </div>\r\n              <div className=\"temperature\">\r\n                <p>\r\n                  {this.state.temperatureC}Â°<span>C</span>\r\n                </p>\r\n              \r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Forcast icon={this.state.icon} weather={this.state.main} />\r\n        </React.Fragment>\r\n      );\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          <img src={loader} style={{ width: \"50%\", WebkitUserDrag: \"none\" }} />\r\n          <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\r\n            Detecting your location\r\n          </h3>\r\n          <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\r\n            Your current location wil be displayed on the App <br></br> & used\r\n            for calculating Real time weather.\r\n          </h3>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n","import React, { useState } from \"react\";\r\nimport CurrentLocation from \"./currentLocation\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container\">\r\n        <CurrentLocation />\r\n      </div>\r\n      <div className=\"footer-info\">\r\n        <a href=\"https://github.com/KarthikBandari1/forcastWeather.git\">\r\n          Source Code\r\n        </a>{\" \"}\r\n        | Developed by{\" \"}\r\n        <a  href=\"https://www.linkedin.com/in/bandari-karthik\">\r\n          Bandari Karthik\r\n        </a>{\" \"}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}